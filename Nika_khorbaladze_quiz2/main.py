# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pymongo, random
from pymongo import MongoClient
from bson import ObjectId

# import MongoClient,mongodb, Mongo

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1186, 730)
        MainWindow.setStyleSheet("background-color:\"light gray\"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.id = QtWidgets.QLabel(self.centralwidget)
        self.id.setGeometry(QtCore.QRect(60, 40, 89, 34))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.id.setFont(font)
        self.id.setObjectName("id")
        self.last = QtWidgets.QLabel(self.centralwidget)
        self.last.setGeometry(QtCore.QRect(60, 130, 131, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.last.setFont(font)
        self.last.setObjectName("last")
        self.first = QtWidgets.QLabel(self.centralwidget)
        self.first.setGeometry(QtCore.QRect(60, 230, 131, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.first.setFont(font)
        self.first.setObjectName("first")
        self.subject = QtWidgets.QLabel(self.centralwidget)
        self.subject.setGeometry(QtCore.QRect(60, 330, 131, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.subject.setFont(font)
        self.subject.setObjectName("subject")
        self.grade = QtWidgets.QLabel(self.centralwidget)
        self.grade.setGeometry(QtCore.QRect(50, 440, 141, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.grade.setFont(font)
        self.grade.setObjectName("grade")
        self.writebutton = QtWidgets.QPushButton(self.centralwidget)
        self.writebutton.setGeometry(QtCore.QRect(350, 560, 171, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.writebutton.setFont(font)
        self.writebutton.setStyleSheet("background-color:\"gray\"\n"
"")
        self.writebutton.setObjectName("writebutton")
        self.allrecordbutton = QtWidgets.QPushButton(self.centralwidget)
        self.allrecordbutton.setGeometry(QtCore.QRect(800, 30, 311, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.allrecordbutton.setFont(font)
        self.allrecordbutton.setStyleSheet("background-color: \"gray\"")
        self.allrecordbutton.setObjectName("allrecordbutton")
        self.searchbutton = QtWidgets.QPushButton(self.centralwidget)
        self.searchbutton.setGeometry(QtCore.QRect(800, 130, 311, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.searchbutton.setFont(font)
        self.searchbutton.setStyleSheet("background-color: \"gray\"")
        self.searchbutton.setObjectName("searchbutton")
        self.updatebutton = QtWidgets.QPushButton(self.centralwidget)
        self.updatebutton.setGeometry(QtCore.QRect(800, 230, 311, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.updatebutton.setFont(font)
        self.updatebutton.setStyleSheet("background-color: \"gray\"")
        self.updatebutton.setObjectName("updatebutton")
        self.deletebutton = QtWidgets.QPushButton(self.centralwidget)
        self.deletebutton.setGeometry(QtCore.QRect(800, 340, 311, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.deletebutton.setFont(font)
        self.deletebutton.setStyleSheet("background-color: \"gray\"")
        self.deletebutton.setObjectName("deletebutton")
        self.closebutton = QtWidgets.QPushButton(self.centralwidget)
        self.closebutton.setGeometry(QtCore.QRect(930, 580, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.closebutton.setFont(font)
        self.closebutton.setStyleSheet("background-color: \"gray\"")
        self.closebutton.setObjectName("closebutton")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(230, 20, 431, 71))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(230, 130, 431, 71))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(230, 230, 431, 71))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(230, 330, 431, 71))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(230, 430, 431, 71))
        self.lineEdit_5.setObjectName("lineEdit_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1186, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.client=MongoClient('mongodb://localhost:27017/')
        self.db=self.client['N_khorbaladze_Quiz2']
        self.collection=self.db['students']

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.allrecordbutton.clicked.connect(self.addall)
        self.searchbutton.clicked.connect(self.search)
        self.updatebutton.clicked.connect(self.update)
        self.deletebutton.clicked.connect(self.delete)
        self.writebutton.clicked.connect(self.write)
        self.closebutton.clicked.connect(MainWindow.close)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.id.setText(_translate("MainWindow", "იდენტ."))
        self.last.setText(_translate("MainWindow", "გვარი"))
        self.first.setText(_translate("MainWindow", "სახელი"))
        self.subject.setText(_translate("MainWindow", "საგანი"))
        self.grade.setText(_translate("MainWindow", "შეფასება"))
        self.writebutton.setText(_translate("MainWindow", "ჩაწერა"))
        self.allrecordbutton.setText(_translate("MainWindow", "ყველა ჩანაწერის გაკეთება"))
        self.searchbutton.setText(_translate("MainWindow", "ძებნა"))
        self.updatebutton.setText(_translate("MainWindow", "განახლება"))
        self.deletebutton.setText(_translate("MainWindow", "წაშლა"))
        self.closebutton.setText(_translate("MainWindow", "Close"))
        
    def addall(self):
        myclient = pymongo.MongoClient("mongodb://localhost:27017/")
        mydb = myclient["N_khorbaladze_Quiz2"]
        mycol = mydb["students"]
        LNames = ['აბაშიძე', 'გიგაური', 'არჩვაძე', 'ახალაია', 'ბაძაღუა', 'ბერიანიძე', 'ბერიშვილი', 'გვენცაძე', 'დალაქიშვილი',
'ანთიძე', 'გიორგაძე', 'გოგალაძე', 'გოცირიძე', 'ვარდიძე', 'ზარანდია', 'თადუმაძე', 'ლაბაძე', 'კვარაცხელია',
'კუსრაძე', 'კვესელავა', 'კაპანაძე', 'კასრაძე', 'კვინიკაძე', 'კოპაძე', 'კანკია', 'კორძაია', 'მიქავა', 'მელია',
'მონიავა', 'ნიაური', 'ლაცაბიძე', 'მიქაძე', 'ნემსიწვერიძე', 'მაისურაძე', 'მაცაბერიძე', 'მჟავია', 'მაჩალაძე',
'ოდიშარია', 'მეტრეველი', 'ნეფარიძე', 'მოდებაძე', 'მარჯანიძე', 'მუმლაძე', 'ნასრაშვილი', 'ჯანჯღავა', 'მოსია',
'ნოზაძე', 'ნუცუბიძე', 'ონიანი', 'ოქრუაშვილი', 'პერტია', 'რაზმაძე', 'რევაზაშვილი', 'საგანელიძე', 'ჯახაია',
'სალუქვაძე', 'სამსონაშვილი', 'სამხარაძე', 'სარალიძე', 'სართანია', 'სარიშვილი', 'სიმონიშვილი', 'სხილაძე',
'ხურციძე', 'სიხარულიძე', 'ტაბატაძე', 'ფაცაცია', 'ფილაური', 'ფუხაშვილი', 'ქობალია', 'ყიფშიძე', 'შაინიძე',
'ფიფია', 'შენგელია', 'შეროზია', 'შველიძე', 'ჩხეიძე', 'ჩადუნელი', 'ჩიკვაშვილი', 'ცქიტიშვილი', 'ჩოკორაია',
'ცაგურია', 'ცერცვაძე', 'ცუხიშვილი', 'ძინძიბაძე', 'წერეთელი', 'წიკლაური', 'ჭავჭანიძე', 'ჩირაძე', 'ჭელიძე',
'ჭანტურია', 'სირაძე', 'შონია', 'ხანჯალაძე', 'ხარაზიშვილი', 'ხელაძე', 'ხვინგია', 'ხუციშვილი', 'ჯანელიძე',
'ჯოხაძე']
        FNames = ['ანა', 'ანუკი', 'ბარბარე', 'გვანცა', 'დიანა', 'ეკა', 'ელენე', 'ვერონიკა', 'ვიქტორია', 'თათია', 'ლამზირა',
'თეა', 'თეკლე', 'თინიკო', 'თამარი', 'იზაბელა', 'ია', 'იამზე', 'ლია', 'ლიკა', 'ლანა', 'მარიკა', 'მანანა',
'მაია', 'მაკა', 'მარიამი', 'ნანა', 'ნანი', 'ნატა', 'ნატო', 'ნინო', 'ნონა', 'ოლიკო', 'ქეთევანი', 'სალომე',
'სოფიკო', 'ნია', 'ქრისტინე', 'შორენა', 'ხატია', 'ალეკო', 'ალიკა', 'ამირან', 'ანდრია', 'არჩილი', 'ასლანი',
'ბაჩუკი', 'ბექა', 'გიგა', 'გიორგი', 'დავითი',
'გიგი', 'გოგა', 'დათა', 'ერეკლე', 'თემური', 'იაკობ', 'ილია', 'ირაკლი', 'ლადო', 'ლაშა', 'მიხეილ',
'ნიკა', 'ოთარი', 'პაატა', 'რამაზ', 'რამინი', 'რატი', 'რაული', 'რევაზი', 'რომა', 'რომანი', 'სანდრო',
'საბა', 'სერგი', 'სიმონ', 'შალვა', 'შოთა', 'ცოტნე', 'ჯაბა']
        Subject = ['პროგრამირების საფუძვლები', 'კალკულუსი II', 'შესავალი ფიზიკაში', 'კომპიუტერული უნარჩვევები',
'ქიმიის შესავალი', 'ბიოლოგიის შესავალი', 'ალგორითმები I', 'შესავალი ელექტრონიკაში',
'მონაცემთა სტრუქტურები', 'ალგორითმები II']
        Point = [str(i) for i in range(101)]
        ch = random.choice
        Stud_recs = [' '.join([ch(LNames), ch(FNames), ch(Subject), ch(Point)]) for _ in range(10)]
        for i in Stud_recs:
            lastname,firstname,sub1,sub2,point = i.split()
            dictionary = {
        "id":''.join(random.choices('0123456789', k=10)),
        "lastname": lastname,
        "firstname": firstname,
        "subject": sub1+" "+sub2,
        "point": point
            }
            x=mycol.insert_one(dictionary)
        print("all records are written")
        
    def search(self):
        text1=self.lineEdit.text()
        text2=self.lineEdit_2.text()
        text3=self.lineEdit_3.text()
        text4=self.lineEdit_4.text()
        text5=self.lineEdit_5.text()
        dict={
                '$or': [
                    {'id':text1},
                    {'lastname':text2},
                    {'firstname':text3},
                    {'subject':text4},
                    {'point':text5}
                    ]
            }
        recs=self.collection.find(dict)
        for rec in recs:
            print (rec)
    
    def update(self):
        text1=self.lineEdit.text()
        text2=self.lineEdit_2.text()
        text3=self.lineEdit_3.text()
        text4=self.lineEdit_4.text()
        text5=self.lineEdit_5.text()
        
        dict={'id':text1} 
        upd_values={'$set':{}}
        
        if text2:
            upd_values['$set']['lastname'] = text2
        if text3:
            upd_values['$set']['firstname'] = text3
        if text4:
            upd_values['$set']['subject'] = text4
        if text5:
            upd_values['$set']['point'] = text5
        
        self.collection.update_one(dict, upd_values)
        print(' updated')

    def delete(self):
        s1 = self.lineEdit.text()
        self.collection.delete_one({'id': s1})
        print('Record is deleted')

    def write(self):
        dict = {
            'id': self.lineEdit.text(),
            'LastName': self.lineEdit_2.text(),
            'FirstName': self.lineEdit_3.text(),
            'Subject': self.lineEdit_4.text(),
            'Point': self.lineEdit_5.text()
        }
        self.collection.insert_one(dict)
        print('Record is inserted')
        



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
